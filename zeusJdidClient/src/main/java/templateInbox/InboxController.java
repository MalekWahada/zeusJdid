package templateInbox;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import com.jfoenix.controls.JFXTextArea;
import com.jfoenix.controls.JFXTextField;

import ejbService.PostServiceEjbRemote;
import entities.Friend;
import entities.Message;
import entities.Notification;
import entities.User;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.scene.control.MenuItem;
import javafx.scene.control.ScrollPane;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.Parent;
import javafx.scene.control.Label;
import javafx.scene.control.MenuButton;

import javafx.scene.shape.Circle;
import javafx.util.Duration;
import messageEJB.ChatRoomRemote;

public class InboxController implements Initializable {
	@FXML
	private ImageView homeImg;
	@FXML
	private ImageView inboxImg;
	@FXML
	private ImageView jobOfferImg;
	@FXML
	private ImageView notifImg;
	@FXML
	private ImageView contactImg;
	@FXML
	private MenuButton dropDownProfile;
	@FXML
	private MenuItem seeProfileAction;
	@FXML
	private MenuItem jobApplications;
	@FXML
	private MenuItem logOut;
	@FXML
	private Circle profileImg;
	@FXML
	private ImageView statImg;
	@FXML
	private JFXTextField searchTF;

	//////////////////////////// other parameters

	@FXML
	private AnchorPane anChatRoom;
	@FXML
	private ScrollPane msgScrlPane;
	@FXML
	private JFXTextField searchFrTF;
	@FXML
	private JFXTextArea sendMsgTF;
	@FXML
	private VBox vbFriends;

	////////////////////////////// server parameters //////////////////
	private User user;
	private Context context;
	String jndiuser = "zeusPI-ear/zeusPI-ejb/ChatRoom!messageEJB.ChatRoomRemote";
	ChatRoomRemote daouser;

	String jndiPost = "zeusPI-ear/zeusPI-ejb/PostServiceEjb!ejbService.PostServiceEjbRemote";
	Context context1 ;
	PostServiceEjbRemote daoPost;
	
	
	private User userReceiver;
	private VBox anMsg = new VBox();
	private VBox anMsgGetToAdd;
	///////////////////////////// user to transmit msg ////////////////

	// Event Listener on ImageView[#homeImg].onMouseClicked
	@FXML
	public void homeImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateHome/home.fxml"));
		homeImg.getScene().setRoot(root);

	}

	// Event Listener on ImageView[#inboxImg].onMouseClicked
	@FXML
	public void inboxImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateInbox/inbox.fxml"));
		homeImg.getScene().setRoot(root);
	}

	// Event Listener on ImageView[#jobOfferImg].onMouseClicked
	@FXML
	public void jobOfferImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateJobs/jobs.fxml"));
		homeImg.getScene().setRoot(root);
	}

	// Event Listener on ImageView[#notifImg].onMouseClicked
	@FXML
	public void notifImgClicked(MouseEvent event) throws IOException {
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateNotif/notif.fxml"));
		homeImg.getScene().setRoot(root);
	}

	// Event Listener on ImageView[#contactImg].onMouseClicked
	@FXML
	public void contactImgAction(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateContact/contact.fxml"));
		homeImg.getScene().setRoot(root);
	}

	// Event Listener on MenuItem[#jobApplications].onAction
	@FXML
	public void jobApplicationsAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on MenuItem[#logOut].onAction
	@FXML
	public void logOutAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Circle[#profileImg].onMouseClicked
	@FXML
	public void profileImgAction(MouseEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on ImageView[#statImg].onMouseClicked
	@FXML
	public void statImgAction(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateStat/stat.fxml"));
		homeImg.getScene().setRoot(root);

	}

	//////////////////////////////////////// messages + services

	@Override
	public void initialize(java.net.URL location, ResourceBundle resources) {

		try {

			vbFriends = initaliseChatroom(vbFriends);

		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	public void getparametrt()
	{
		
	}

	public VBox initaliseChatroom(VBox vbFriends) throws NamingException {
		context = new InitialContext();
		daouser = (ChatRoomRemote) context.lookup(jndiuser);
		//////////////// after SKA ///////////
		user = daouser.findUser(3);
		///////////////////////////////////////

		////////////////////////////////////   notif
		
		//String jndiPost = "zeusPI-ear/zeusPI-ejb/ChatRoom!messageEJB.ChatRoomRemote";
		 context1 = new InitialContext();
		daoPost = (PostServiceEjbRemote) context1.lookup(jndiPost);
		long nbReadNotif = daoPost.countReadOrNot(user.getId());
		if(nbReadNotif>0)
			notifImg.setImage(new Image("/icons/notifRed.png"));
		else notifImg.setImage(new Image("/icons/notifBl.png"));
		
		
		ArrayList<User> lFriends = daouser.findAllFrind(user.getId());

		for (User p1 : lFriends) {

			////////////////// box friends ////////////////////////////////
			Label labNameaUser = new Label();
			labNameaUser.setText(
					"\n   " + p1.getFirstname() + " " + p1.getLastname());
			Circle userPicCerc = new Circle(50, 20, 20);
			Image imgUser ;
			if(p1.getPictureURL()!=null)
			imgUser = new Image(p1.getPictureURL());

			else imgUser = new Image("/icons/maleuserBl.png");
			userPicCerc.setFill(new ImagePattern(imgUser));
			HBox hBoxUser = new HBox();
			hBoxUser.getChildren().addAll(userPicCerc, labNameaUser);

			//////////////// define user msg action mouse on
			//////////////// click//////////////// //////////////////
			hBoxUser.setOnMouseClicked((e) -> {
				// anMsg.getChildren().removeAll();
				userReceiver = p1;
				Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, new EventHandler() {
					@Override
					public void handle(Event event) {
						
						anMsg = new VBox();
						anMsg.getChildren().removeAll();
						anMsgGetToAdd = anMsg;
						anMsg.getChildren().removeAll();
						msgScrlPane.setContent(anMsg);
						///////////////////// timeline

						ArrayList<Message> lMessages = new ArrayList<Message>();
						ArrayList<Message> lMessages1 = new ArrayList<Message>();

						lMessages = daouser.getUserMessages(user.getId(), userReceiver.getId());
						lMessages1 = daouser.getUserMessages(userReceiver.getId(), user.getId());

						System.out.println("             szzzzzzzzzz    " + lMessages1.size());
						////////////////////// order by time stamp comparable
						////////////////////// /////////////////
						lMessages1.addAll(lMessages);
						Collections.sort(lMessages1, new Comparator<Message>() {
							public int compare(Message o1, Message o2) {
								if (o1.getTimeMessage() == null || o2.getTimeMessage() == null)
									return 0;
								return o1.getTimeMessage().compareTo(o2.getTimeMessage());
							}
						});

						for (Message m : lMessages1) {

							Label labMsg = new Label();
							Label labMsgTime = new Label();
							labMsg.setText("   " + m.getContent() + "   ");

							Color col = Color.rgb(102, 140, 255);
							Color col1 = Color.rgb(193, 193, 164);

							CornerRadii corn = new CornerRadii(10);
							Background background = new Background(new BackgroundFill(col, corn, Insets.EMPTY));
							Background background1 = new Background(new BackgroundFill(col1, corn, Insets.EMPTY));

							if (m.getUserTransmitter().getId() == user.getId())
								labMsg.setBackground(background);
							else
								labMsg.setBackground(background1);

							labMsgTime.setText(m.getTimeMessage().toString());
							HBox hbMsg = new HBox();
							hbMsg.getChildren().addAll(labMsg, labMsgTime);
							anMsg.getChildren().add(hbMsg);
						}
						anMsg.setSpacing(15);
						msgScrlPane.setContent(anMsg);

						System.out.println("    kntttttttttt       ");
					}
				}), new KeyFrame(Duration.millis(1000)));
				timeline.setCycleCount(Timeline.INDEFINITE);

				timeline.play();
			});
			/////////// ici

			vbFriends.getChildren().add(hBoxUser);

		}
		return vbFriends;
	}

	@FXML
	private void searchFrAction(KeyEvent event) throws NamingException {

		if (searchFrTF.getText() == null) {
			vbFriends = initaliseChatroom(vbFriends);
		} else {

			vbFriends.getChildren().clear();
			ChatRoomRemote daoSf = (ChatRoomRemote) context.lookup(jndiuser);
			user = daoSf.findUser(3);
			///////////////////////////////////////

			ArrayList<User> lFriends = daoSf.findAllFrind(user.getId());

			ArrayList<User> lFriends1 = new ArrayList<User>();

			//////////////////// getting friends with their names from original
			//////////////////// list //////////////
			for (User d : lFriends) {
				// if(d.getName() != null && d.getName().contains(search))
				// System.out.println(d.getFriendreciver().getFirstname()+" jhjh
				// "+d.getFriendreciver().getLastname());
				if (d.getFirstname().contains(searchFrTF.getText())
						|| d.getLastname().contains(searchFrTF.getText())) {
					lFriends1.add(d);

				}

			}
			System.out.println(lFriends1.size());
			for (User p1 : lFriends1) {
				////////////////// box friends ////////////////////////////////
				Label labNameaUser = new Label();
				labNameaUser.setText(
						"\n   " + p1.getFirstname() + "  " + p1.getLastname());
				Circle userPicCerc = new Circle(50, 20, 20);
				

				Image imgUser ;
				if(p1.getPictureURL()!=null)
				imgUser = new Image(p1.getPictureURL());

				else imgUser = new Image("/icons/maleuserBl.png");
				
				
				userPicCerc.setFill(new ImagePattern(imgUser));
				HBox hBoxUser = new HBox();
				hBoxUser.getChildren().addAll(userPicCerc, labNameaUser);

				//////////////// define user msg action mouse on
				//////////////// click//////////////// //////////////////
				hBoxUser.setOnMouseClicked((e) -> {

					ArrayList<Message> lMessages = daouser.getUserMessages(user.getId(), p1.getId());
					ArrayList<Message> lMessages1 = daouser.getUserMessages(p1.getId(), user.getId());

					////////////////////// order by time stamp comparable
					////////////////////// /////////////////
					lMessages1.addAll(lMessages);
					Collections.sort(lMessages1, new Comparator<Message>() {
						public int compare(Message o1, Message o2) {
							if (o1.getTimeMessage() == null || o2.getTimeMessage() == null)
								return 0;
							return o1.getTimeMessage().compareTo(o2.getTimeMessage());
						}
					});

					anMsg = new VBox();
					anMsgGetToAdd = anMsg;
					for (Message m : lMessages1) {

						Label labMsg = new Label();
						Label labMsgTime = new Label();
						labMsg.setText("   " + m.getContent() + "   ");

						Color col = Color.rgb(102, 140, 255);
						Color col1 = Color.rgb(193, 193, 164);

						CornerRadii corn = new CornerRadii(10);
						Background background = new Background(new BackgroundFill(col, corn, Insets.EMPTY));
						Background background1 = new Background(new BackgroundFill(col1, corn, Insets.EMPTY));

						if (m.getUserTransmitter().getId() == user.getId())
							labMsg.setBackground(background);
						else
							labMsg.setBackground(background1);

						labMsgTime.setText(m.getTimeMessage().toString());

						HBox hbMsg = new HBox();
						hbMsg.getChildren().addAll(labMsg, labMsgTime);
						anMsg.getChildren().add(hbMsg);

					}
					msgScrlPane.setContent(anMsg);
					anMsg.setSpacing(15);

				});

				vbFriends.getChildren().add(hBoxUser);

			}

		}

	}

	@FXML
	private void sendMsgAction(KeyEvent event) throws NamingException {

		context = new InitialContext();
		daouser = (ChatRoomRemote) context.lookup(jndiuser);

		sendMsgTF.setOnKeyPressed(new EventHandler<KeyEvent>() {

			@Override
			public void handle(KeyEvent ke) {
				// TODO Auto-generated method stub
				KeyCode key = ke.getCode();
				if (key == KeyCode.ENTER) {
					Message message = new Message();
					message.setContent(sendMsgTF.getText());
					message.setTimeMessage(new Timestamp(System.currentTimeMillis()));
					message.setUserTransmitter(user);
					message.setUserReceiver(userReceiver);
					message = daouser.addMessage(message);

					
					/////////////////////////////////   notifications
					Notification ntf1 = new Notification();
					ntf1.setContentNotif(user.getFirstname()+" "+user.getLastname()+" sent a message  to you  , Check your Inbox   !!");
					ntf1.setReadNotif(true);
					ntf1.setUserSenderNtf(user);
					ntf1.setUserReceiverNtf(message.getUserReceiver());
					ntf1.setNotifTime(new Timestamp(System.currentTimeMillis()));
					daoPost.addNotification(ntf1);
					
					
					//////////////////// add to Vbox message + styles
					Label labMsg = new Label();
					Label labMsgTime = new Label();
					labMsg.setText("   " + message.getContent() + "   ");
					Color col = Color.rgb(102, 140, 255);
					CornerRadii corn = new CornerRadii(10);
					Background background = new Background(new BackgroundFill(col, corn, Insets.EMPTY));
					labMsg.setBackground(background);
					labMsgTime.setText(message.getTimeMessage().toString());

					HBox hbMsg = new HBox();
					hbMsg.getChildren().addAll(labMsg, labMsgTime);
					anMsgGetToAdd.getChildren().add(hbMsg);

				}
			}

		});

	}

}
