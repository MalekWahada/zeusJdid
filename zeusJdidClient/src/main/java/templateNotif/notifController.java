package templateNotif;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import com.jfoenix.controls.JFXTextField;

import ejbService.PostServiceEjbRemote;
import entities.EmplomentOffer;
import entities.Notification;
import entities.User;
import javafx.event.ActionEvent;

import javafx.scene.control.MenuItem;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.ImagePattern;
import javafx.scene.Parent;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.MenuButton;

import javafx.scene.shape.Circle;

public class notifController implements Initializable{
	@FXML
	private ImageView homeImg;
	@FXML
	private ImageView inboxImg;
	@FXML
	private ImageView jobOfferImg;
	@FXML
	private ImageView notifImg;
	@FXML
	private ImageView contactImg;
	@FXML
	private MenuButton dropDownProfile;
	@FXML
	private MenuItem seeProfileAction;
	@FXML
	private MenuItem jobApplications;
	@FXML
	private MenuItem logOut;
	@FXML
	private Circle profileImg;
	@FXML
	private ImageView statImg;
	@FXML
	private JFXTextField searchTF;
	@FXML
	private VBox vbNotif;
	
	/////////////////////////    parameters 
	private User user;
	private Context context;
	String jndi = "zeusPI-ear/zeusPI-ejb/PostServiceEjb!ejbService.PostServiceEjbRemote";
	PostServiceEjbRemote daouser;
	
	// Event Listener on ImageView[#homeImg].onMouseClicked
	@FXML
	public void homeImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateHome/home.fxml"));
		homeImg.getScene().setRoot(root);
		
	}
	// Event Listener on ImageView[#inboxImg].onMouseClicked
	@FXML
	public void inboxImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateInbox/inbox.fxml"));
		homeImg.getScene().setRoot(root);
	}
	// Event Listener on ImageView[#jobOfferImg].onMouseClicked
	@FXML
	public void jobOfferImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateJobs/jobs.fxml"));
		homeImg.getScene().setRoot(root);
	}
	// Event Listener on ImageView[#notifImg].onMouseClicked
	@FXML
	public void notifImgClicked(MouseEvent event) throws IOException {
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateNotif/notif.fxml"));
		homeImg.getScene().setRoot(root);	
		}
	// Event Listener on ImageView[#contactImg].onMouseClicked
	@FXML
	public void contactImgAction(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateContact/contact.fxml"));
		homeImg.getScene().setRoot(root);	
	}
	// Event Listener on MenuItem[#jobApplications].onAction
	@FXML
	public void jobApplicationsAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on MenuItem[#logOut].onAction
	@FXML
	public void logOutAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Circle[#profileImg].onMouseClicked
	@FXML
	public void profileImgAction(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on ImageView[#statImg].onMouseClicked
	@FXML
	public void statImgAction(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateStat/stat.fxml"));
		homeImg.getScene().setRoot(root);	
		
	}
	
	
	/////////////////////////////////////   my methods
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		try {
			intiNotif();
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public void intiNotif() throws NamingException
	{
		context = new InitialContext();
		daouser = (PostServiceEjbRemote) context.lookup(jndi);
		///////////////////////// after ska
		User user = daouser.findUser(3);
		/////////////////////////

		///////////////////   notif check
		long nbReadNotif = daouser.countReadOrNot(user.getId());
		if(nbReadNotif>0)
			notifImg.setImage(new Image("/icons/notifRed.png"));
		else notifImg.setImage(new Image("/icons/notifBl.png"));
		
		
		Image imagProfile;
		if (user.getPictureURL() != null)
			imagProfile = new Image(user.getPictureURL());

		else
			imagProfile = new Image("/icons/maleuserBl.png");
		profileImg.setFill(new ImagePattern(imagProfile));
		
		
		ArrayList<Notification> lNotifications = daouser.getAllNotif(user.getId());
		
	for(Notification n:lNotifications)
	{
		HBox hbNotif = new HBox();
		
		Image imgUser;
		Circle userPicCerc = new Circle(50, 20, 20);
		if (n.getUserSenderNtf().getPictureURL() != null)
			imgUser = new Image(n.getUserSenderNtf().getPictureURL());

		else
			imgUser = new Image("/icons/maleuserBl.png");
		userPicCerc.setFill(new ImagePattern(imgUser));
		Label labContent = new Label();
		labContent.setText("       "+n.getContentNotif()+"       " );
		labContent.setAlignment(Pos.CENTER);
		
		Label notifTime = new Label();
		notifTime.setText("     " + timedisplay(n.getNotifTime().getTime()));
		
		
		VBox vbcnntTime = new VBox();
		vbcnntTime.getChildren().addAll(labContent,notifTime);
		
		///////////////////////   buttons actions
		Button bntRead = new Button();
		Button btnDeleteNotif = new Button();
		Image imageRead = new Image(getClass().getResourceAsStream("/icons/checkBl.png"));
		bntRead.setGraphic(new ImageView(imageRead));
		Image imageDelet = new Image(getClass().getResourceAsStream("/icons/crossRed.png"));
		btnDeleteNotif.setGraphic(new ImageView(imageDelet));
		
		
		HBox hbBtn = new HBox();
		if(n.getReadNotif())
			 hbBtn.getChildren().addAll(bntRead,btnDeleteNotif);
		else  hbBtn.getChildren().add(btnDeleteNotif);
		
		
		btnDeleteNotif.setOnAction((ActionEvent e) -> {
			
			Alert alert = new Alert(AlertType.CONFIRMATION, " Delete  ?", ButtonType.YES, ButtonType.NO,
			ButtonType.CANCEL);

	       alert.showAndWait();
			
	       if (alert.getResult() == ButtonType.YES) {
			daouser.removeNotification(n.getIdNotif());
			vbNotif.getChildren().remove(hbNotif);
	       }

			});
		
		bntRead.setOnAction((ActionEvent e) -> {
			System.out.println("    nnnnnnnnnnnnnnnn       "+n.getReadNotif());
			hbBtn.getChildren().remove(bntRead);
//			n.setReadNotif(false);
			
			System.out.println("    nnnnnnnnnnnnnnnn       "+n.getReadNotif());
			Notification n22=daouser.findNotif(n.getIdNotif());
			n22.setReadNotif(false);
			n22 = daouser.markNotifAsRead(n22);
			Alert alert = new Alert(AlertType.INFORMATION);
	        alert.setTitle("Information");
	        alert.setHeaderText("Notification");
	        alert.setContentText("Notification marked as Read Successfully  !!!");
	        alert.showAndWait();
	        long nbReadNotif1 = daouser.countReadOrNot(user.getId());
			if(nbReadNotif1>0)
				notifImg.setImage(new Image("/icons/notifRed.png"));
			else notifImg.setImage(new Image("/icons/notifBl.png"));
			});
		hbBtn.setAlignment(Pos.TOP_LEFT);
		hbNotif.getChildren().addAll(userPicCerc,vbcnntTime,hbBtn);
		//hbNotif.setAlignment(Pos.CENTER);
		
		
		String cssLayout = "-fx-border-color: #001a1a;";
		hbNotif.setStyle(cssLayout);
		
		vbNotif.getChildren().add(hbNotif);
	}
	vbNotif.setSpacing(8);
	}
	
	
	public String timedisplay(long c) {
		Date date = new Date();

		long time = date.getTime();
		long diff = time - c;
		long seconds = diff / 1000;
		long minutes = seconds / 60;
		long hours = minutes / 60;
		long days = hours / 24;
		return days + " d " + hours % 24 + " h ";
		// + minutes % 60 + " m " + seconds % 60 + " s ";

	}
}