package templateHome;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.geometry.Pos;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.hamcrest.core.IsInstanceOf;
import org.hibernate.persister.walking.spi.MetamodelGraphWalker;
import org.hibernate.type.CalendarTimeType;

import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXTextField;

//import UsrInterface.Upload;
import ejbService.PostServiceEjbRemote;
import entities.Comments;
import entities.Friend;
import entities.LikedPost;
import entities.Media;
import entities.Message;
import entities.Notification;
import entities.Post;
import entities.TextPost;
import entities.User;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.scene.control.MenuItem;
import javafx.scene.control.Slider;
import javafx.scene.control.SplitMenuButton;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.CornerRadii;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import messageEJB.ChatRoomRemote;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.paint.ImagePattern;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.MenuButton;

import javafx.scene.shape.Circle;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import post_Ndhif.UpdatePopUpController;
import templateNotif.notifController;

public class homeController implements Initializable {

	@FXML
	private ImageView homeImg;
	@FXML
	private ImageView inboxImg;
	@FXML
	private ImageView jobOfferImg;
	@FXML
	private ImageView notifImg;
	@FXML
	private ImageView contactImg;
	@FXML
	private MenuButton dropDownProfile;
	@FXML
	private MenuItem seeProfileAction;
	@FXML
	private MenuItem jobApplications;
	@FXML
	private MenuItem logOut;
	@FXML
	private Circle profileImg;
	@FXML
	private ImageView statImg;
	@FXML
	private JFXTextField searchTF;
	@FXML
	private JFXButton makePostBtn;
	@FXML
	private VBox an;
	@FXML
	private VBox vbFriendSugg;
	@FXML
	private Label friendSuggLab;

	Context context;
	String jndi = "zeusPI-ear/zeusPI-ejb/PostServiceEjb!ejbService.PostServiceEjbRemote";

	String jndiMessage = "zeusPI-ear/zeusPI-ejb/ChatRoom!messageEJB.ChatRoomRemote";
	Context context1 ;
	
	static Parent root1;
	/////////////////// private parameters ///////////////

	private String imageUrl;

	// Event Listener on ImageView[#homeImg].onMouseClicked
	@FXML
	public void homeImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateHome/home.fxml"));
		homeImg.getScene().setRoot(root);

	}

	// Event Listener on ImageView[#inboxImg].onMouseClicked
	@FXML
	public void inboxImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateInbox/inbox.fxml"));
		homeImg.getScene().setRoot(root);
	}

	// Event Listener on ImageView[#jobOfferImg].onMouseClicked
	@FXML
	public void jobOfferImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateJobs/jobs.fxml"));
		homeImg.getScene().setRoot(root);
	}

	// Event Listener on ImageView[#notifImg].onMouseClicked
	@FXML
	public void notifImgClicked(MouseEvent event) throws IOException {
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateNotif/notif.fxml"));
		homeImg.getScene().setRoot(root);
	}

	// Event Listener on ImageView[#contactImg].onMouseClicked
	@FXML
	public void contactImgAction(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateContact/contact.fxml"));
		homeImg.getScene().setRoot(root);
	}

	// Event Listener on MenuItem[#jobApplications].onAction
	@FXML
	public void jobApplicationsAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on MenuItem[#logOut].onAction
	@FXML
	public void logOutAction(ActionEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on Circle[#profileImg].onMouseClicked
	@FXML
	public void profileImgAction(MouseEvent event) {
		// TODO Autogenerated
	}

	// Event Listener on ImageView[#statImg].onMouseClicked
	@FXML
	public void statImgAction(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateStat/stat.fxml"));
		homeImg.getScene().setRoot(root);

	}

	//////////////////////////////////////////////////
	@Override
	public void initialize(URL location, ResourceBundle resources) {

		Image image1 = new Image(getClass().getResourceAsStream("/icons/makePost.png"));
		makePostBtn.setGraphic(new ImageView(image1));
		try {
			init();
			intiFrSugg();
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void init() throws NamingException {
		Image image1 = new Image(getClass().getResourceAsStream("/icons/makePost.png"));
		makePostBtn.setGraphic(new ImageView(image1));

		context = new InitialContext();
		PostServiceEjbRemote dao = (PostServiceEjbRemote) context.lookup(jndi);
		
		//////////////// after SKA ///////////
		User u1 = dao.findUser(3);
		/////////////// set profile img
		
		
		//////////////////////   notif
		long nbReadNotif = dao.countReadOrNot(u1.getId());
		if(nbReadNotif>0)
			notifImg.setImage(new Image("/icons/notifRed.png"));
		else notifImg.setImage(new Image("/icons/notifBl.png"));
		
		
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Image imagProfile;
		if (u1.getPictureURL() != null)
			imagProfile = new Image(u1.getPictureURL());

		else
			imagProfile = new Image("/icons/maleuserBl.png");
		profileImg.setFill(new ImagePattern(imagProfile));
		ArrayList<Post> lPosts = new ArrayList<Post>();
		lPosts.removeAll(lPosts);
		lPosts = dao.findallPostsRelatFriend(u1.getId());

		////////////////////// order by timesatmp

		Collections.sort(lPosts, new Comparator<Post>() {
			public int compare(Post o1, Post o2) {
				if (o1.getPostTime() == null || o2.getPostTime() == null)
					return 0;
				return o2.getPostTime().compareTo(o1.getPostTime());
			}
		});

		for (Post p : lPosts) {

			if (p instanceof Media) {
				Media p1 = (Media) p;

				/////////////////////////////// user part
				Label labNameaUser = new Label();
				labNameaUser.setText("         " + p1.getUser().getFirstname() + "  " + p1.getUser().getLastname()
						+ "                                                     ");
				String labnameStyle = "-fx-font-weight: bold;";
				labNameaUser.setStyle(labnameStyle);
				labNameaUser.setTextFill(Color.DODGERBLUE);
				Label Labtime = new Label();
				Labtime.setText("         " + timedisplay(p1.getPostTime().getTime()));
				VBox vnameTime = new VBox(labNameaUser, Labtime);
				Circle userPicCerc = new Circle(50, 20, 20);
				Image imgUser;
				if (p1.getUser().getPictureURL() != null)
					imgUser = new Image(p1.getUser().getPictureURL());

				else
					imgUser = new Image("/icons/maleuserBl.png");
				userPicCerc.setFill(new ImagePattern(imgUser));
				HBox hBoxUser = new HBox();
				hBoxUser.setOnMouseClicked(new EventHandler<Event>() {

					@Override
					public void handle(Event event) {
						// TODO Auto-generated method stub

						try {
							Parent root = FXMLLoader
									.load(getClass().getClassLoader().getResource("templateContact/contact.fxml"));
							homeImg.getScene().setRoot(root);
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				});
				//////////////////////////// description part
				Label labDesc = new Label();
				labDesc.setText(p1.getDescription() + "\n \n \n");
				labDesc.setAlignment(Pos.CENTER);
				// HBox descBox = new HBox(labDesc);

				////////////////////////// image part
				ImageView image = new ImageView();
				image.setFitWidth(250);
				image.setFitHeight(150);
				if (p1.getPath_url() != null) {
					Image imag = new Image(p1.getPath_url());

					image.setImage(imag);
				}

				/////////////////////////// drop down : delete + update
				SplitMenuButton menuButton = new SplitMenuButton();
				menuButton.setText("  ...  ");
				MenuItem update = new MenuItem("Update");
				MenuItem Delete = new MenuItem("Delete");

				Image imageDelP = new Image(getClass().getResourceAsStream("/icons/deleteRed.png"));
				Delete.setGraphic(new ImageView(imageDelP));
				Image imageUpdP = new Image(getClass().getResourceAsStream("/icons/updateBl.png"));
				update.setGraphic(new ImageView(imageUpdP));
				menuButton.getItems().addAll(update, Delete);

				VBox h = new VBox();

				Delete.setOnAction((ActionEvent e) -> {

					Alert alert = new Alert(AlertType.CONFIRMATION, " Delete  ?", ButtonType.YES, ButtonType.NO,
							ButtonType.CANCEL);

					alert.showAndWait();

					if (alert.getResult() == ButtonType.YES) {
						dao.deletePost(p.getIdPost());
						an.getChildren().remove(h);

					}
				});

				update.setOnAction((ActionEvent e) -> {

					try {
						FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("updatePopUp.fxml"));

						Parent root = fxmlLoader.load();
						UpdatePopUpController cntrl = fxmlLoader.getController();
						cntrl.setInterfaceParam(p);

						Scene scene = new Scene(root);
						Stage stage = new Stage();
						stage.setScene(scene);
						stage.showAndWait();
						Parent rootup = FXMLLoader
								.load(getClass().getClassLoader().getResource("templateHome/home.fxml"));
						homeImg.getScene().setRoot(rootup);

					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				});

				/////////////////////////////// likes
				long kj = dao.countPostLike(p.getIdPost());
				Label nblik = new Label(kj + " likes");

				final ToggleButton likeBtn = new ToggleButton("like  ");

				
				
				Image imagelk = new Image(getClass().getResourceAsStream("/icons/likeBl.png"));
				Image imagedlk = new Image(getClass().getResourceAsStream("/icons/thumbdown.png"));

				likeBtn.setGraphic(new ImageView(imagelk));
				String cssCmmtBtn = "-fx-background-color : #e1eaea;";
				likeBtn.setStyle(cssCmmtBtn);

				LikedPost lpFind = dao.findlikePostUser(p1.getIdPost(), u1.getId());
				System.out.println(lpFind);
				if (lpFind.getIdLk() != 0) {
					likeBtn.setGraphic(new ImageView(imagedlk));
					likeBtn.setText("unlike");
					likeBtn.setSelected(true);
					
					
					/////////////////////////////  set notifications image 
					long nbReadNotif1 = dao.countReadOrNot(u1.getId());
					if(nbReadNotif1>0)
						notifImg.setImage(new Image("/icons/notifRed.png"));
					else notifImg.setImage(new Image("/icons/notifBl.png"));
				}

				likeBtn.setOnAction((ActionEvent e) -> {
					if (likeBtn.isSelected()) {
						likeBtn.setGraphic(new ImageView(imagedlk));
						likeBtn.setText("unlike");
						LikedPost lPost = new LikedPost();
						lPost.setPost(p);
						lPost.setUser(u1);
						dao.addLike(lPost);
						long kj1 = dao.countPostLike(p.getIdPost());
						nblik.setText(kj1 + " likes");
						
						
						Notification ntf1 = new Notification();
						ntf1.setContentNotif(u1.getFirstname()+" "+u1.getLastname()+" liked your post !!");
						ntf1.setReadNotif(true);
						ntf1.setUserSenderNtf(u1);
						ntf1.setUserReceiverNtf(p.getUser());
						ntf1.setNotifTime(new Timestamp(System.currentTimeMillis()));
						dao.addNotification(ntf1);
						
					} else {
						likeBtn.setGraphic(new ImageView(imagelk));
						likeBtn.setText("like  ");
						likeBtn.setStyle("-fx-background-color: #ffffff;");
						LikedPost lPost = new LikedPost();
						lPost.setPost(p);
						lPost.setUser(u1);
						dao.deleteLike(lPost);
						long kj2 = dao.countPostLike(p.getIdPost());
						nblik.setText(kj2 + " likes");
					}

				});

				////////////////////////////////// nb comments
				Label nbCmmt = new Label();
				nbCmmt.setText("   .   " + dao.countNbCmmts(p.getIdPost()) + "  Comments");

				///////////////////////////////// Comment Btn
				ToggleButton commentBtn = new ToggleButton("comment");

				// commentBtn.setStyle(cssBtnPost);

				Image imageCmmt = new Image(getClass().getResourceAsStream("/icons/commentBl.png"));
				commentBtn.setGraphic(new ImageView(imageCmmt));

				///////////////////// boxs + user cntrl

				if (p1.getUser().getId() == u1.getId())
					hBoxUser.getChildren().addAll(userPicCerc, vnameTime, menuButton);
				else
					hBoxUser.getChildren().addAll(userPicCerc, vnameTime);

				HBox nblikCmmt = new HBox(nblik, nbCmmt);
				HBox boxBtn = new HBox(likeBtn, commentBtn);
				h.getChildren().addAll(hBoxUser, labDesc, image, nblikCmmt, boxBtn);

				///////////////// cmmt boxes

				commentBtn.setOnAction((ActionEvent e) -> {

					HBox hbuserCmmt = new HBox();

					// VBox vBox = new VBox();
					TextArea tfCmmt = new TextArea();
					Color col1 = Color.rgb(230, 230, 230);
					CornerRadii corn1 = new CornerRadii(10);
					Background background1 = new Background(new BackgroundFill(col1, corn1, Insets.EMPTY));
					tfCmmt.setBackground(background1);
					tfCmmt.setMaxWidth(260);
					Button postCmmt = new Button("post");
					postCmmt.setVisible(false);
					postCmmt.setStyle("-fx-background-color: #668cff;");

					Circle cmmtPicUser = new Circle(50, 20, 20);

					Image imgUserAddCmmt;
					if (p1.getUser().getPictureURL() != null)
						imgUserAddCmmt = new Image(p1.getUser().getPictureURL());

					else
						imgUserAddCmmt = new Image("/icons/maleuserBl.png");
					cmmtPicUser.setFill(new ImagePattern(imgUserAddCmmt));

					hbuserCmmt.getChildren().addAll(cmmtPicUser, tfCmmt, postCmmt);
					tfCmmt.setOnKeyPressed(new EventHandler<KeyEvent>() {

						@Override
						public void handle(KeyEvent ke) {
							if (tfCmmt.getText().length() > 0) {
								postCmmt.setVisible(true);
								postCmmt.setOnAction((ActionEvent e) -> {
									Comments c1 = new Comments();
									c1.setContent(tfCmmt.getText());

									c1.setUser(u1);
									c1.setTimeComment(new Timestamp(System.currentTimeMillis()));
									c1.setPost(p);
									dao.addComment(c1);
									nbCmmt.setText(" . " + dao.countNbCmmts(p.getIdPost()) + " Comments");
									tfCmmt.setText("");
									postCmmt.setVisible(false);
									Label labcm = new Label(c1.getContent());
									// hbuserCmmt.getChildren().add(labcm);

									HBox vbCmmtUser = new HBox();
									HBox vbCmmtAction = new HBox();
									Label labCmmtTime = new Label();

									/////////// cmmt user
									Label labCmmtUser = new Label();
									labCmmtUser.setText("  " + p1.getUser().getFirstname() + " "
											+ p1.getUser().getLastname() + "       ");
									labCmmtUser.setTextFill(Color.DODGERBLUE);
									Circle cmmtUserPic = new Circle(15, 15, 15);

									Image imgUserCmm;
									if (p1.getUser().getPictureURL() != null)
										imgUserCmm = new Image(p1.getUser().getPictureURL());

									else
										imgUserCmm = new Image("/icons/maleuserBl.png");

									cmmtUserPic.setFill(new ImagePattern(imgUserCmm));
									vbCmmtUser.getChildren().addAll(cmmtUserPic, labCmmtUser);

									//////////////// content cmmt
									TextArea labCmmt = new TextArea();
									labCmmt.setText(" " + c1.getContent() + "   ");
									labCmmt.setStyle("-fx-text-inner-color: black;");
									labCmmt.setWrapText(true);

									Color col11 = Color.rgb(193, 193, 164);
									CornerRadii corn = new CornerRadii(10);
									Background background11 = new Background(
											new BackgroundFill(col11, corn, Insets.EMPTY));
									labCmmt.setBackground(background11);
									labCmmt.setEditable(false);

									SplitMenuButton menuButtonCmmt = new SplitMenuButton();
									menuButtonCmmt.setText(" ... ");
									MenuItem updatCmmt = new MenuItem("Update");
									MenuItem DeleteCmmt = new MenuItem("Delete");
									DeleteCmmt.setGraphic(new ImageView(imageDelP));
									updatCmmt.setGraphic(new ImageView(imageUpdP));
									menuButtonCmmt.getItems().addAll(updatCmmt, DeleteCmmt);

									if (c1.getUser().getId() == u1.getId())
										vbCmmtUser.getChildren().addAll(labCmmt, menuButtonCmmt);
									else
										vbCmmtUser.getChildren().add(labCmmt);
									////////////////// update cmmt
									updatCmmt.setOnAction((ActionEvent e1) -> {

										labCmmt.setEditable(true);
										labCmmt.setOnKeyPressed(new EventHandler<KeyEvent>() {

											@Override
											public void handle(KeyEvent ke) {
												// TODO Auto-generated method
												// stub
												KeyCode key = ke.getCode();
												if (key == KeyCode.ENTER) {
													Comments c3 = new Comments();
													c3 = dao.findComment(c1);
													System.out.println("      " + c3);
													c3.setTimeComment(new Timestamp(System.currentTimeMillis()));
													c3.setContent(labCmmt.getText());
													c3 = dao.updateComment(c3);
													labCmmt.setText(labCmmt.getText());
													labCmmtTime.setText(timedisplay(c3.getTimeComment().getTime()));
													labCmmt.setEditable(false);

												}
											}
										});

									});

									/////////////////////////// end update
									VBox vb12 = new VBox();
									////////////////////////// delete cmmt
									DeleteCmmt.setOnAction((ActionEvent e1) -> {
										Alert alert = new Alert(AlertType.CONFIRMATION, " Delete  ?", ButtonType.YES,
												ButtonType.NO, ButtonType.CANCEL);
										alert.showAndWait();

										if (alert.getResult() == ButtonType.YES) {
											dao.deleteComment(c1.getIdComment());
											h.getChildren().remove(vb12);
										}

									});

									////////////// lab time
									labCmmtTime.setText("     " + timedisplay(c1.getTimeComment().getTime()));
									vb12.getChildren().addAll(vbCmmtUser, labCmmtTime);
									String cssLayout = "-fx-border-color: #008080;";
									vb12.setStyle(cssLayout);
									h.getChildren().add(vb12);
								});
							} else if (tfCmmt.getText().length() == 0)
								postCmmt.setVisible(false);

						}

					});

					h.getChildren().add(hbuserCmmt);
					/////////////////////// show cmmts

					ArrayList<Comments> lCmmtsPost = dao.findallComments(p.getIdPost());
					for (Comments c2 : lCmmtsPost) {

						////////////////// boxs
						HBox vbCmmtUser = new HBox();
						HBox vbCmmtAction = new HBox();
						Label labCmmtTime = new Label();

						/////////// cmmt user
						Label labCmmtUser = new Label();
						labCmmtUser.setText(
								"  " + p1.getUser().getFirstname() + " " + p1.getUser().getLastname() + "       ");
						labCmmtUser.setTextFill(Color.DODGERBLUE);
						Circle cmmtUserPic = new Circle(15, 15, 15);

						Image imgUserCmm;
						if (p1.getUser().getPictureURL() != null)
							imgUserCmm = new Image(p1.getUser().getPictureURL());

						else
							imgUserCmm = new Image("/icons/maleuserBl.png");

						cmmtUserPic.setFill(new ImagePattern(imgUserCmm));
						vbCmmtUser.getChildren().addAll(cmmtUserPic, labCmmtUser);

						//////////////// content cmmt
						TextArea labCmmt = new TextArea();
						labCmmt.setText(" " + c2.getContent() + "   ");
						labCmmt.setStyle("-fx-text-inner-color: black;");
						labCmmt.setWrapText(true);

						Color col11 = Color.rgb(193, 193, 164);
						CornerRadii corn = new CornerRadii(10);
						Background background11 = new Background(new BackgroundFill(col11, corn, Insets.EMPTY));
						labCmmt.setBackground(background11);
						labCmmt.setEditable(false);

						SplitMenuButton menuButtonCmmt = new SplitMenuButton();
						menuButtonCmmt.setText(" ... ");
						MenuItem updatCmmt = new MenuItem("Update");
						MenuItem DeleteCmmt = new MenuItem("Delete");
						DeleteCmmt.setGraphic(new ImageView(imageDelP));
						updatCmmt.setGraphic(new ImageView(imageUpdP));
						menuButtonCmmt.getItems().addAll(updatCmmt, DeleteCmmt);

						if (c2.getUser().getId() == u1.getId())
							vbCmmtUser.getChildren().addAll(labCmmt, menuButtonCmmt);
						else
							vbCmmtUser.getChildren().add(labCmmt);
						////////////////// update cmmt
						updatCmmt.setOnAction((ActionEvent e1) -> {

							labCmmt.setEditable(true);
							labCmmt.setOnKeyPressed(new EventHandler<KeyEvent>() {

								@Override
								public void handle(KeyEvent ke) {
									// TODO Auto-generated method stub
									KeyCode key = ke.getCode();
									if (key == KeyCode.ENTER) {
										Comments c3 = new Comments();
										c3 = dao.findComment(c2);
										System.out.println("      " + c3);
										c3.setTimeComment(new Timestamp(System.currentTimeMillis()));
										c3.setContent(labCmmt.getText());
										c3 = dao.updateComment(c3);
										labCmmt.setText(labCmmt.getText());
										labCmmtTime.setText(timedisplay(c3.getTimeComment().getTime()));
										labCmmt.setEditable(false);

									}
								}
							});

						});

						/////////////////////////// end update

						VBox vb12 = new VBox();
						////////////////////////// delete cmmt
						DeleteCmmt.setOnAction((ActionEvent e1) -> {
							Alert alert = new Alert(AlertType.CONFIRMATION, " Delete  ?", ButtonType.YES, ButtonType.NO,
									ButtonType.CANCEL);
							alert.showAndWait();

							if (alert.getResult() == ButtonType.YES) {
								dao.deleteComment(c2.getIdComment());
								h.getChildren().remove(vb12);
							}

						});

						////////////// lab time
						labCmmtTime.setText("     " + timedisplay(c2.getTimeComment().getTime()));
						vb12.getChildren().addAll(vbCmmtUser, labCmmtTime);
						String cssLayout = "-fx-border-color: #008080;";
						vb12.setStyle(cssLayout);
						h.getChildren().add(vb12);

					}

					// h.getChildren().addAll(hbuserCmmt,vbCmmtUser,vbCmmtAction,labCmmtTime);

				});

				////////////////////// boxs

				h.setAlignment(Pos.CENTER);
				String cssLayout = "-fx-border-color: #008080;";
				h.setStyle(cssLayout);
				an.getChildren().add(h);
			}

			//////////////////////////////////////////// text Post
			else if (p instanceof TextPost) {
				TextPost p1 = (TextPost) p;

				/////////////////////////////// user part
				Label labNameaUser = new Label();
				labNameaUser.setText("         " + p1.getUser().getFirstname() + "  " + p1.getUser().getLastname()
						+ "                                                     ");
				String labnameStyle = "-fx-font-weight: bold;";
				labNameaUser.setStyle(labnameStyle);
				labNameaUser.setTextFill(Color.DODGERBLUE);
				Label Labtime = new Label();
				Labtime.setText("         " + timedisplay(p1.getPostTime().getTime()));
				VBox vnameTime = new VBox(labNameaUser, Labtime);
				Circle userPicCerc = new Circle(50, 20, 20);

				Image imgUser;
				if (p1.getUser().getPictureURL() != null)
					imgUser = new Image(p1.getUser().getPictureURL());

				else
					imgUser = new Image("/icons/maleuserBl.png");

				userPicCerc.setFill(new ImagePattern(imgUser));
				HBox hBoxUser = new HBox();
				hBoxUser.setOnMouseClicked(new EventHandler<Event>() {

					@Override
					public void handle(Event event) {
						// TODO Auto-generated method stub

						try {
							Parent root = FXMLLoader
									.load(getClass().getClassLoader().getResource("templateContact/contact.fxml"));
							homeImg.getScene().setRoot(root);
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

					}
				});
				//////////////////////////// description part
				Label labDesc = new Label();
				labDesc.setText(p1.getContent() + "\n \n \n");
				labDesc.setAlignment(Pos.CENTER);
				// HBox descBox = new HBox(labDesc);

				////////////////////////// image part

				/////////////////////////// drop down : delete + update
				SplitMenuButton menuButton = new SplitMenuButton();
				menuButton.setText("  ...  ");
				MenuItem update = new MenuItem("Update");
				MenuItem Delete = new MenuItem("Delete");

				Image imageDelP = new Image(getClass().getResourceAsStream("/icons/deleteRed.png"));
				Delete.setGraphic(new ImageView(imageDelP));
				Image imageUpdP = new Image(getClass().getResourceAsStream("/icons/updateBl.png"));
				update.setGraphic(new ImageView(imageUpdP));
				menuButton.getItems().addAll(update, Delete);

				VBox h = new VBox();

				Delete.setOnAction((ActionEvent e) -> {

					Alert alert = new Alert(AlertType.CONFIRMATION, " Delete  ?", ButtonType.YES, ButtonType.NO,
							ButtonType.CANCEL);
					alert.showAndWait();

					if (alert.getResult() == ButtonType.YES) {
						dao.deletePost(p.getIdPost());
						an.getChildren().remove(h);
					}
				});

				update.setOnAction((ActionEvent e) -> {

					try {
						FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("updatePopUp.fxml"));

						Parent root = fxmlLoader.load();
						UpdatePopUpController cntrl = fxmlLoader.getController();
						cntrl.setInterfaceParam(p);

						Scene scene = new Scene(root);
						Stage stage = new Stage();
						stage.setScene(scene);
						stage.showAndWait();
						Parent rootup = FXMLLoader
								.load(getClass().getClassLoader().getResource("templateHome/home.fxml"));
						homeImg.getScene().setRoot(rootup);

					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

				});

				/////////////////////////////// likes
				long kj = dao.countPostLike(p.getIdPost());
				Label nblik = new Label(kj + " likes");

				final ToggleButton likeBtn = new ToggleButton("like  ");

				// String cssBtnPost = ".button:pressed:hover {-fx-scale-y:
				// 0.9;\n"+"-fx-scale-x: 0.9;}\n"+
				// ".button:hover {-fx-background-color:
				// #383838;\n"+"-fx-scale-y: 1.1;}";
				// likeBtn.setStyle(cssBtnPost);

				Image imagelk = new Image(getClass().getResourceAsStream("/icons/likeBl.png"));
				Image imagedlk = new Image(getClass().getResourceAsStream("/icons/thumbdown.png"));

				likeBtn.setGraphic(new ImageView(imagelk));
				String cssCmmtBtn = "-fx-background-color : #e1eaea;";
				likeBtn.setStyle(cssCmmtBtn);

				LikedPost lpFind = dao.findlikePostUser(p1.getIdPost(), u1.getId());
				System.out.println(lpFind);
				if (lpFind.getIdLk() != 0) {
					likeBtn.setGraphic(new ImageView(imagedlk));
					likeBtn.setText("unlike");
					likeBtn.setSelected(true);
				}

				likeBtn.setOnAction((ActionEvent e) -> {
					if (likeBtn.isSelected()) {
						likeBtn.setGraphic(new ImageView(imagedlk));
						likeBtn.setText("unlike");
						LikedPost lPost = new LikedPost();
						lPost.setPost(p);
						lPost.setUser(u1);
						dao.addLike(lPost);
						long kj1 = dao.countPostLike(p.getIdPost());
						nblik.setText(kj1 + " likes");
					} else {
						likeBtn.setGraphic(new ImageView(imagelk));
						likeBtn.setText("like  ");
						likeBtn.setStyle("-fx-background-color: #ffffff;");
						LikedPost lPost = new LikedPost();
						lPost.setPost(p);
						lPost.setUser(u1);
						dao.deleteLike(lPost);
						long kj2 = dao.countPostLike(p.getIdPost());
						nblik.setText(kj2 + " likes");
					}

				});

				////////////////////////////////// nb comments
				Label nbCmmt = new Label();
				nbCmmt.setText("   .   " + dao.countNbCmmts(p.getIdPost()) + "  Comments");

				///////////////////////////////// Comment Btn
				ToggleButton commentBtn = new ToggleButton("comment");

				// commentBtn.setStyle(cssBtnPost);

				Image imageCmmt = new Image(getClass().getResourceAsStream("/icons/commentBl.png"));
				commentBtn.setGraphic(new ImageView(imageCmmt));

				///////////////////// boxs + user cntrl

				if (p1.getUser().getId() == u1.getId())
					hBoxUser.getChildren().addAll(userPicCerc, vnameTime, menuButton);
				else
					hBoxUser.getChildren().addAll(userPicCerc, vnameTime);

				HBox nblikCmmt = new HBox(nblik, nbCmmt);
				HBox boxBtn = new HBox(likeBtn, commentBtn);
				h.getChildren().addAll(hBoxUser, labDesc, nblikCmmt, boxBtn);

				///////////////// cmmt boxes

				commentBtn.setOnAction((ActionEvent e) -> {

					HBox hbuserCmmt = new HBox();

					// VBox vBox = new VBox();
					TextArea tfCmmt = new TextArea();
					Color col1 = Color.rgb(230, 230, 230);
					CornerRadii corn1 = new CornerRadii(10);
					Background background1 = new Background(new BackgroundFill(col1, corn1, Insets.EMPTY));
					tfCmmt.setBackground(background1);
					tfCmmt.setMaxWidth(260);
					Button postCmmt = new Button("post");
					postCmmt.setVisible(false);
					postCmmt.setStyle("-fx-background-color: #668cff;");

					Circle cmmtPicUser = new Circle(50, 20, 20);

					Image imgUserAddCmmt;
					if (u1.getPictureURL() != null)
						imgUserAddCmmt = new Image(u1.getPictureURL());

					else
						imgUserAddCmmt = new Image("/icons/maleuserBl.png");

					cmmtPicUser.setFill(new ImagePattern(imgUserAddCmmt));

					hbuserCmmt.getChildren().addAll(cmmtPicUser, tfCmmt, postCmmt);
					tfCmmt.setOnKeyPressed(new EventHandler<KeyEvent>() {

						@Override
						public void handle(KeyEvent ke) {
							if (tfCmmt.getText().length() > 0) {
								postCmmt.setVisible(true);
								postCmmt.setOnAction((ActionEvent e) -> {
									Comments c1 = new Comments();
									c1.setContent(tfCmmt.getText());

									c1.setUser(u1);
									c1.setTimeComment(new Timestamp(System.currentTimeMillis()));
									c1.setPost(p);
									dao.addComment(c1);
									nbCmmt.setText(" . " + dao.countNbCmmts(p.getIdPost()) + " Comments");
									tfCmmt.setText("");
									postCmmt.setVisible(false);
									// Label labcm = new Label(c1.getContent());

									////////////////////////   notification
									
									Notification ntf1 = new Notification();
									ntf1.setContentNotif(u1.getFirstname()+" "+u1.getLastname()+" commented on your post !!");
									ntf1.setReadNotif(true);
									ntf1.setUserSenderNtf(u1);
									ntf1.setUserReceiverNtf(p.getUser());
									ntf1.setNotifTime(new Timestamp(System.currentTimeMillis()));
									dao.addNotification(ntf1);
									/////////////////////////////////////////////////
									
									HBox vbCmmtUser = new HBox();
									HBox vbCmmtAction = new HBox();
									Label labCmmtTime = new Label();

									/////////// cmmt user
									Label labCmmtUser = new Label();
									labCmmtUser.setText("  " + p1.getUser().getFirstname() + " "
											+ p1.getUser().getLastname() + "       ");
									labCmmtUser.setTextFill(Color.DODGERBLUE);
									Circle cmmtUserPic = new Circle(15, 15, 15);

									Image imgUserCmm;
									if (u1.getPictureURL() != null)
										imgUserCmm = new Image( p1.getUser().getPictureURL());

									else
										imgUserCmm = new Image("/icons/maleuserBl.png");

									cmmtUserPic.setFill(new ImagePattern(imgUserCmm));
									vbCmmtUser.getChildren().addAll(cmmtUserPic, labCmmtUser);

									//////////////// content cmmt
									TextArea labCmmt = new TextArea();
									labCmmt.setText(" " + c1.getContent() + "   ");
									labCmmt.setStyle("-fx-text-inner-color: black;");
									labCmmt.setWrapText(true);

									Color col11 = Color.rgb(193, 193, 164);
									CornerRadii corn = new CornerRadii(10);
									Background background11 = new Background(
											new BackgroundFill(col11, corn, Insets.EMPTY));
									labCmmt.setBackground(background11);
									labCmmt.setEditable(false);

									SplitMenuButton menuButtonCmmt = new SplitMenuButton();
									menuButtonCmmt.setText(" ... ");
									MenuItem updatCmmt = new MenuItem("Update");
									MenuItem DeleteCmmt = new MenuItem("Delete");
									DeleteCmmt.setGraphic(new ImageView(imageDelP));
									updatCmmt.setGraphic(new ImageView(imageUpdP));
									menuButtonCmmt.getItems().addAll(updatCmmt, DeleteCmmt);

									if (c1.getUser().getId() == u1.getId())
										vbCmmtUser.getChildren().addAll(labCmmt, menuButtonCmmt);
									else
										vbCmmtUser.getChildren().add(labCmmt);
									////////////////// update cmmt
									updatCmmt.setOnAction((ActionEvent e1) -> {

										labCmmt.setEditable(true);
										labCmmt.setOnKeyPressed(new EventHandler<KeyEvent>() {

											@Override
											public void handle(KeyEvent ke) {
												// TODO Auto-generated method
												// stub
												KeyCode key = ke.getCode();
												if (key == KeyCode.ENTER) {
													Comments c3 = new Comments();
													c3 = dao.findComment(c1);
													System.out.println("      " + c3);
													c3.setTimeComment(new Timestamp(System.currentTimeMillis()));
													c3.setContent(labCmmt.getText());
													c3 = dao.updateComment(c3);
													labCmmt.setText(labCmmt.getText());
													labCmmtTime.setText(timedisplay(c3.getTimeComment().getTime()));
													labCmmt.setEditable(false);

												}
											}
										});

									});

									/////////////////////////// end update
									VBox vb12 = new VBox();
									////////////////////////// delete cmmt
									DeleteCmmt.setOnAction((ActionEvent e1) -> {
										Alert alert = new Alert(AlertType.CONFIRMATION, " Delete  ?", ButtonType.YES,
												ButtonType.NO, ButtonType.CANCEL);
										alert.showAndWait();

										if (alert.getResult() == ButtonType.YES) {
											dao.deleteComment(c1.getIdComment());
											h.getChildren().remove(vb12);
										}

									});

									////////////// lab time
									labCmmtTime.setText("     " + timedisplay(c1.getTimeComment().getTime()));
									vb12.getChildren().addAll(vbCmmtUser, labCmmtTime);
									String cssLayout = "-fx-border-color: #008080;";
									vb12.setStyle(cssLayout);
									h.getChildren().add(vb12);
								});
							} else if (tfCmmt.getText().length() == 0)
								postCmmt.setVisible(false);

						}

					});

					h.getChildren().add(hbuserCmmt);
					/////////////////////// show cmmts

					ArrayList<Comments> lCmmtsPost = dao.findallComments(p.getIdPost());
					for (Comments c2 : lCmmtsPost) {

						////////////////// boxs
						HBox vbCmmtUser = new HBox();
						HBox vbCmmtAction = new HBox();
						Label labCmmtTime = new Label();

						/////////// cmmt user
						Label labCmmtUser = new Label();
						labCmmtUser.setText(
								"  " + p1.getUser().getFirstname() + " " + p1.getUser().getLastname() + "       ");
						labCmmtUser.setTextFill(Color.DODGERBLUE);
						Circle cmmtUserPic = new Circle(15, 15, 15);

						Image imgUserCmm;
						if (u1.getPictureURL() != null)
							imgUserCmm = new Image(p1.getUser().getPictureURL());

						else
							imgUserCmm = new Image("/icons/maleuserBl.png");

						cmmtUserPic.setFill(new ImagePattern(imgUserCmm));
						vbCmmtUser.getChildren().addAll(cmmtUserPic, labCmmtUser);

						//////////////// content cmmt
						TextArea labCmmt = new TextArea();
						labCmmt.setText(" " + c2.getContent() + "   ");
						labCmmt.setStyle("-fx-text-inner-color: black;");
						labCmmt.setWrapText(true);

						Color col11 = Color.rgb(193, 193, 164);
						CornerRadii corn = new CornerRadii(10);
						Background background11 = new Background(new BackgroundFill(col11, corn, Insets.EMPTY));
						labCmmt.setBackground(background11);
						labCmmt.setEditable(false);

						SplitMenuButton menuButtonCmmt = new SplitMenuButton();
						menuButtonCmmt.setText(" ... ");
						MenuItem updatCmmt = new MenuItem("Update");
						MenuItem DeleteCmmt = new MenuItem("Delete");
						DeleteCmmt.setGraphic(new ImageView(imageDelP));
						updatCmmt.setGraphic(new ImageView(imageUpdP));
						menuButtonCmmt.getItems().addAll(updatCmmt, DeleteCmmt);

						if (c2.getUser().getId() == u1.getId())
							vbCmmtUser.getChildren().addAll(labCmmt, menuButtonCmmt);
						else
							vbCmmtUser.getChildren().add(labCmmt);
						////////////////// update cmmt
						updatCmmt.setOnAction((ActionEvent e1) -> {

							labCmmt.setEditable(true);
							labCmmt.setOnKeyPressed(new EventHandler<KeyEvent>() {

								@Override
								public void handle(KeyEvent ke) {
									// TODO Auto-generated method stub
									KeyCode key = ke.getCode();
									if (key == KeyCode.ENTER) {
										Comments c3 = new Comments();
										c3 = dao.findComment(c2);
										System.out.println("      " + c3);
										c3.setTimeComment(new Timestamp(System.currentTimeMillis()));
										c3.setContent(labCmmt.getText());
										c3 = dao.updateComment(c3);
										labCmmt.setText(labCmmt.getText());
										labCmmtTime.setText(timedisplay(c3.getTimeComment().getTime()));
										labCmmt.setEditable(false);

									}
								}
							});

						});

						/////////////////////////// end update

						VBox vb12 = new VBox();
						////////////////////////// delete cmmt
						DeleteCmmt.setOnAction((ActionEvent e1) -> {
							Alert alert = new Alert(AlertType.CONFIRMATION, " Delete  ?", ButtonType.YES, ButtonType.NO,
									ButtonType.CANCEL);
							alert.showAndWait();

							if (alert.getResult() == ButtonType.YES) {
								dao.deleteComment(c2.getIdComment());
								h.getChildren().remove(vb12);
							}

						});

						////////////// lab time
						labCmmtTime.setText("     " + timedisplay(c2.getTimeComment().getTime()));
						vb12.getChildren().addAll(vbCmmtUser, labCmmtTime);
						String cssLayout = "-fx-border-color: #008080;\n";
						vb12.setStyle(cssLayout);
						h.getChildren().add(vb12);

					}

					// h.getChildren().addAll(hbuserCmmt,vbCmmtUser,vbCmmtAction,labCmmtTime);

				});

				////////////////////// boxs

				h.setAlignment(Pos.CENTER);
				String cssLayout = "-fx-border-color: #001a1a;";
				h.setStyle(cssLayout);
				an.getChildren().add(h);
			}
		}
		an.setSpacing(40);

	}

	@FXML
	public void MakePostAction(ActionEvent event) throws IOException, NamingException {
		root1 = FXMLLoader.load(getClass().getClassLoader().getResource("templateHome/home.fxml"));
		Parent rootAddPst = FXMLLoader.load(getClass().getResource("addPost.fxml"));
		Scene scAddPost = new Scene(rootAddPst);
		Stage s1 = new Stage();
		s1.setScene(scAddPost);

		s1.showAndWait();
		init();
	}

	public void intiFrSugg() throws NamingException {
		context1 = new InitialContext();
		PostServiceEjbRemote dao1 = (PostServiceEjbRemote) context1.lookup(jndi);

		//////////////// after SKA ///////////
		User u1 = dao1.findUser(3);
		/////////////// set profile img

		ArrayList<User> lFriends = dao1.findAllNoFriend(u1.getId());

		//////////////// generate 3 random friends
		ArrayList<User> lRandomFriend = new ArrayList<User>();
		Random random = new Random();
		for (int i = 0; i < 3; i++)

		{
			int randomIndex = random.nextInt(lFriends.size());
			lRandomFriend.add(lFriends.get(randomIndex));
			lFriends.remove(randomIndex);
		}

		ArrayList<User> luserCnntFr = dao1.findAllFrind(u1.getId());
		System.out.println("usr ccnt  : "+luserCnntFr.size());
		for (User f : lRandomFriend) {

			//////////    label user name 
			Label labNameaUser = new Label();
			labNameaUser.setText(f.getFirstname() + " " + f.getLastname()+"\n\n\n\n");
			labNameaUser.setStyle("-fx-font-weight: bold;\n"+"-fx-font: 20 arial;");
			Circle userPicCerc = new Circle(50, 40, 40);
			Image imgUser;
			
			//////////////////   pic user
			if (f.getPictureURL() != null)
				imgUser = new Image(f.getPictureURL());
			else
				imgUser = new Image("/icons/maleuserBl.png");
			userPicCerc.setFill(new ImagePattern(imgUser));

			//////////////   cnnt btn
			Button bb = new Button("Connect");
			bb.setStyle("-fx-background-color: #668cff;");

			
			
			/////////////    mutual fr lab
			Label mutualFRLab = new Label();
			//luserCnntFr
			ArrayList<User> lNoFrFriends = new ArrayList<User> ();
			lNoFrFriends = dao1.findAllFrind(f.getId());
			System.out.println("lNoFrFriends : "+lNoFrFriends.toString());
			int i =0;
			for(User u:lNoFrFriends)
			{
			for(User user:luserCnntFr)
			{
				if(u.getId()==user.getId())
					i++;
			}
			}
			
			mutualFRLab.setText(i+"  Mutual friends  ");
	
			
			VBox vRandmFr = new VBox(userPicCerc, labNameaUser,mutualFRLab,bb );

			vRandmFr.setAlignment(Pos.CENTER);
			String cssLayout = "-fx-border-color: #001a1a;";
			vRandmFr.setStyle(cssLayout);

			vbFriendSugg.getChildren().add(vRandmFr);
			vbFriendSugg.setSpacing(30);

		}

	}

	//////////////////////////////////////////////// nrml functions
	public String timedisplay(long c) {
		Date date = new Date();

		long time = date.getTime();
		long diff = time - c;
		long seconds = diff / 1000;
		long minutes = seconds / 60;
		long hours = minutes / 60;
		long days = hours / 24;
		return days + " d " + hours % 24 + " h ";
		// + minutes % 60 + " m " + seconds % 60 + " s ";

	}

	public ImageView getHomeImg() {
		return homeImg;
	}

	public void setHomeImg(ImageView homeImg) {
		this.homeImg = homeImg;
	}

	public Parent any_function() throws IOException {

		return root1;
	}

	// Event Listener on Button[#uploadBtn].onAction

}
