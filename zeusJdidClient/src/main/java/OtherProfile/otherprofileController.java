package OtherProfile;




import javafx.event.ActionEvent;

import com.jfoenix.controls.JFXTextArea;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;


import java.io.IOException;
import java.net.URL;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.ResourceBundle;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.JOptionPane;

import com.jfoenix.controls.JFXTextField;

import ejbService.UserServiceEjbRemote;
import entities.Education;
import entities.Friend;
import entities.ProfessionalExp;
import entities.Skill;
import entities.User;
import entities.View;
import entities.certification;
import interUser.AcceuilController;
import javafx.event.ActionEvent;

import javafx.scene.control.MenuItem;
import javafx.scene.control.Slider;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import javafx.scene.input.MouseEvent;
import javafx.scene.paint.ImagePattern;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.MenuButton;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import javafx.scene.shape.Circle;
import javafx.scene.text.Font;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.stage.FileChooser.ExtensionFilter;
import utils.Upload;

public class otherprofileController implements Initializable{
	@FXML
	private ImageView homeImg;
	@FXML
	private ImageView inboxImg;
	@FXML
	private ImageView jobOfferImg;
	@FXML
	private ImageView notifImg;
	@FXML
	private ImageView contactImg;
	@FXML
	private MenuButton dropDownProfile;
	@FXML
	private MenuItem seeProfileAction;
	@FXML
	private MenuItem jobApplications;
	@FXML
	private MenuItem logOut;
	@FXML
	private Circle profileImg;
	@FXML
	private ImageView statImg;
	@FXML
	private JFXTextField searchTF;
    @FXML
    private Label name;
    @FXML
    private Circle imageCircle;
    @FXML
    private Label birthday;
    @FXML
    private Label occupation;
    @FXML
    private VBox Skilsvb;
    @FXML
    private Label oneskillSpecialityname;
    @FXML
    private Label oneskillRAIT;
    @FXML
    private VBox expvbox;
 
 

    @FXML
    private VBox Skileduc;
    @FXML
    private VBox expvbox1;
	
     //////////////   service
   Context context ;
	String jndi = "zeusPI-ear/zeusPI-ejb/UserServiceEjb!ejbService.UserServiceEjbRemote";

	UserServiceEjbRemote dao ;
    @FXML
    private VBox snedremovec;
    @FXML
    private HBox sendmessage;
    @FXML
    private HBox removec;
    @FXML
    private HBox addcontact;
    @FXML
    private HBox CancerlInvitation;
	@FXML
	private HBox acceptinvitation;
    

	
    public static User userviseted;
    
	

	@FXML
    private HBox refuseInvitation;
   
	// Event Listener on ImageView[#homeImg].onMouseClicked
	@FXML
	public void homeImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateHome/home.fxml"));
		homeImg.getScene().setRoot(root);
		
	}
	// Event Listener on ImageView[#inboxImg].onMouseClicked
	@FXML
	public void inboxImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateInbox/inbox.fxml"));
		homeImg.getScene().setRoot(root);
	}
	// Event Listener on ImageView[#jobOfferImg].onMouseClicked
	@FXML
	public void jobOfferImgClicked(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateJobs/jobs.fxml"));
		homeImg.getScene().setRoot(root);
	}
	// Event Listener on ImageView[#notifImg].onMouseClicked
	@FXML
	public void notifImgClicked(MouseEvent event) throws IOException {
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateNotif/notif.fxml"));
		homeImg.getScene().setRoot(root);	
		}
	// Event Listener on ImageView[#contactImg].onMouseClicked
	@FXML
	public void contactImgAction(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateContact/contact.fxml"));
		homeImg.getScene().setRoot(root);	
	}
	// Event Listener on MenuItem[#jobApplications].onAction
	@FXML
	public void jobApplicationsAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on MenuItem[#logOut].onAction
	@FXML
	public void logOutAction(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Circle[#profileImg].onMouseClicked
	@FXML
	public void profileImgAction(MouseEvent event) throws IOException {

		Stage primaryStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        Parent root = FXMLLoader.load(getClass().getResource("/templateProfile/mypro.fxml"));
        Scene scene = new Scene(root);
        primaryStage.setTitle("My profile!");
        
        primaryStage.setScene(scene);
        primaryStage.show();
	}
	// Event Listener on ImageView[#statImg].onMouseClicked
	@FXML
	public void statImgAction(MouseEvent event) throws IOException {
		// TODO Autogenerated
		Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("templateStat/stat.fxml"));
		homeImg.getScene().setRoot(root);	
		
	}
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {

Friend f=new Friend();
    	try {
    		context = new InitialContext();
			dao = (UserServiceEjbRemote) context.lookup(jndi);
			userviseted=dao.Loginbymailpwd(userviseted.getEmail(), userviseted.getPassword());
			ArrayList<Friend> list=dao.verifFrinds(userviseted, AcceuilController.usconnected);
			View nv=new View();
			nv.setVieweruser(AcceuilController.usconnected);
			nv.setVieweduser(userviseted);
			dao.AddView(nv);
			if(list.size()==0){
				addcontact.setVisible(true);
				addcontact.setDisable(false);}
			else{
		for(Friend ft:list)
			 f=ft;
			if(f.getAccepted().equals("invitation")){
				if(f.getFriendreciver().getId()==AcceuilController.usconnected.getId())
				{acceptinvitation.setVisible(true);
				acceptinvitation.setDisable(false);
				refuseInvitation.setVisible(true);
				refuseInvitation.setDisable(false);
				}
				else
				{CancerlInvitation.setVisible(true);
				CancerlInvitation.setDisable(false);}
				}
			
			if(f.getAccepted().equals("friend")){
				snedremovec.setVisible(true);
				snedremovec.setDisable(false);}
			}
		} catch (NamingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
			


		// TODO Auto-generated method stub
		Skilsvb.getChildren().removeAll();
		Skilsvb.getChildren().clear();
		
		expvbox.getChildren().removeAll();
		expvbox.getChildren().clear();
		expvbox1.getChildren().removeAll();
		expvbox1.getChildren().clear();
		Skileduc.getChildren().removeAll();
		Skileduc.getChildren().clear();	
		Image imgUser = new Image(userviseted.getPictureURL());
		Image imgUserc = new Image(AcceuilController.usconnected.getPictureURL());
		profileImg.setFill(new ImagePattern(imgUserc));
		
		
		imageCircle.setFill(new ImagePattern(imgUser));
		name.setText(userviseted.getFirstname()+"  "+userviseted.getLastname());
	
		DateFormat dateFormat = new SimpleDateFormat("dd/mm/yyyy");
		String strDate = dateFormat.format(userviseted.getBirthDate());
		birthday.setText(strDate);
		occupation.setText(userviseted.getActualOccupation()+" At "+userviseted.getEntreschool());
		
		List<Skill> l=userviseted.getSkills();
		List<ProfessionalExp> lprof= userviseted.getProfessionalexps();
		List<Education> leduc= userviseted.getEducations();
		List<certification> lcert= userviseted.getCertifications();
		String vv = oneskillSpecialityname.getStyle();
		
		//////////////////////////////Tableau Skill///////////////////////////////////////
		if (l.size()>0)
		for(Skill s:l){
			oneskillSpecialityname = new Label();
			oneskillSpecialityname.setStyle(vv);
			
			
			oneskillRAIT = new Label();
			oneskillSpecialityname.setStyle("-fx-font-weight: bold;");
			oneskillSpecialityname.setFont(new Font(25));
			System.out.println(s.getSpecialite()+" "+s.getName());
			oneskillSpecialityname.setText(s.getSpecialite()+" "+s.getName());
			
			oneskillRAIT.setText("Level "+String.valueOf(s.getRating()));
			oneskillRAIT.setStyle("-fx-font-weight: bold;");
			oneskillRAIT.setFont(new Font(15));
			
			///////////////////   acto skill
	
		VBox vbSkil = new VBox(oneskillSpecialityname,oneskillRAIT);		
		
		Skilsvb.getChildren().add(vbSkil);
        	//textField tf=new TextField();
        	  //	Skilsvb.getChildren().add(new Label("test"));
		Skilsvb.setSpacing(10);


			
			
			
		}
		
		//////////////////////////////Tableau exppro///////////////////////////////////////
		if (lprof.size()>0)
		for(ProfessionalExp exp:lprof){
			Label jobetentr = new Label();
			jobetentr.setStyle(vv);
			
			
			Label dateexp = new Label();
			jobetentr.setStyle("-fx-font-weight: bold;");
			jobetentr.setFont(new Font(25));
			jobetentr.setText(exp.getJobname()+" at "+exp.getEntrepriseName());
			
			dateexp.setText("from "+dateFormat.format(exp.getDatedebut())+" To "+dateFormat.format(exp.getDatefin()));
			dateexp.setStyle("-fx-font-weight: bold;");
			dateexp.setFont(new Font(15));
			JFXTextArea misst=new JFXTextArea();
			misst.setFont(new Font(13));
			misst.setPrefHeight(77);
			
			misst.setText(exp.getJobdescription());
			misst.setEditable(false);
			///////////////////   acto skill
		
			HBox hbActo = new HBox(jobetentr);
		VBox oneexpvbox = new VBox(hbActo,dateexp,misst);		
		
		expvbox.getChildren().add(oneexpvbox);
        	//textField tf=new TextField();
        	  //	Skilsvb.getChildren().add(new Label("test"));
		expvbox.setSpacing(10);
					
			
			
		}
		
		//////////////////////////////Tableau cert///////////////////////////////////////
		if (lcert.size()>0)
		for(certification c:lcert){
			Label speccert = new Label();
			speccert.setStyle(vv);
			
			
		
			speccert.setStyle("-fx-font-weight: bold;");
			speccert.setFont(new Font(25));
			speccert.setText(c.getField()+" : "+c.getName());
			Label center = new Label();	
			center.setText("certifed by "+c.getCentrecertif());
			center.setStyle("-fx-font-weight: bold;");
			center.setFont(new Font(15));
			
			Label datecert = new Label();	
			datecert.setText("At "+dateFormat.format(c.getDateissue()));
			datecert.setStyle("-fx-font-weight: bold;");
			datecert.setFont(new Font(15));

						
			///////////////////   acto skill
			
			HBox hbActo = new HBox(datecert);
		VBox onecert = new VBox(speccert,center,hbActo);		
		
		
		
		Skileduc.getChildren().add(onecert);
        	//textField tf=new TextField();
        	  //	Skilsvb.getChildren().add(new Label("test"));
		Skileduc.setSpacing(10);			
			
		}
		
		//////////////////////////////Tableau education///////////////////////////////////////
		if (leduc.size()>0)
		for(Education ed:leduc){
			Label degspec = new Label();
			degspec.setStyle(vv);
			
			
		
			degspec.setStyle("-fx-font-weight: bold;");
			degspec.setFont(new Font(25));
			degspec.setText(ed.getDegree()+" in "+ed.getSpecialite());
			Label school = new Label();
			school.setText("At "+ed.getSchool());
			school.setStyle("-fx-font-weight: bold;");
			school.setFont(new Font(15));
			Label dateed = new Label();
			dateed.setText("from "+dateFormat.format(ed.getDatedeb())+" To "+dateFormat.format(ed.getDatefin()));
			dateed.setStyle("-fx-font-weight: bold;");
			dateed.setFont(new Font(15));
			
			///////////////////   acto skill
			
			
			HBox hbActo = new HBox(degspec);
		VBox oneexpvbox = new VBox(hbActo,school,dateed);		
		
		expvbox1.getChildren().add(oneexpvbox);
        	//textField tf=new TextField();
        	  //	Skilsvb.getChildren().add(new Label("test"));
		expvbox1.setSpacing(10);
					
			
		}
		
		
	
		
	}
	


    
    @FXML
    private void SendMessageAction(MouseEvent event) {
    
    }

    @FXML
    private void removecAction(MouseEvent event) throws NamingException {
    	context = new InitialContext();
    	Friend f=new Friend();
		dao = (UserServiceEjbRemote) context.lookup(jndi);
		ArrayList<Friend> listf=dao.verifFrinds(userviseted, AcceuilController.usconnected);
		for(Friend ft:listf)
			f=ft;
		dao.deleteFriend(f);
		snedremovec.setDisable(true);
		snedremovec.setVisible(false);
	

		initialize(null, null);
    }

    @FXML
    private void addcontactAction(MouseEvent event) throws NamingException {
    	context = new InitialContext();
		dao = (UserServiceEjbRemote) context.lookup(jndi);
	Friend nf=new Friend();
	nf.setFriendreciver(userviseted);
	nf.setFriendsent(AcceuilController.usconnected);
		dao.Addfriend(nf);
		addcontact.setVisible(false);
		addcontact.setDisable(true);
		initialize(null, null);
    }

    @FXML
    private void CancerlInvitationAction(MouseEvent event) throws NamingException {
    	Friend f=new Friend();
    	context = new InitialContext();
		dao = (UserServiceEjbRemote) context.lookup(jndi);
		ArrayList<Friend> listf=dao.verifFrinds(userviseted, AcceuilController.usconnected);
		for(Friend ft:listf)
			f=ft;	
		dao.deleteFriend(f);
		CancerlInvitation.setVisible(false);
		CancerlInvitation.setDisable(true);
		initialize(null, null);
    }
    
    @FXML
    private void acceptinvitationAction (MouseEvent event) throws NamingException {
    	Friend f=new Friend();
    	context = new InitialContext();
		dao = (UserServiceEjbRemote) context.lookup(jndi);
		ArrayList<Friend> listf=dao.verifFrinds(userviseted, AcceuilController.usconnected);
		for(Friend ft:listf)
			f=ft;
	f.setAccepted("friend");
	acceptinvitation.setDisable(true);
	acceptinvitation.setVisible(false);
	refuseInvitation.setDisable(true);
	refuseInvitation.setVisible(false);
		dao.updateFriend(f);
		initialize(null, null);
    }
    
    @FXML
    private void refuseInvitationAction(MouseEvent event) throws NamingException {
    	Friend f=new Friend();
    	context = new InitialContext();
		dao = (UserServiceEjbRemote) context.lookup(jndi);
		ArrayList<Friend> listf=dao.verifFrinds(userviseted, AcceuilController.usconnected);
		for(Friend ft:listf)
			f=ft;		
		dao.deleteFriend(f);
		acceptinvitation.setDisable(true);
		acceptinvitation.setVisible(false);
		refuseInvitation.setDisable(true);
		refuseInvitation.setVisible(false);		
		initialize(null, null);
    }
    
    
    
}
